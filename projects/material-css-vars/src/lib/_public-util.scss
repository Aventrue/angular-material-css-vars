@import 'variables';

// Utility mixins for the public

@function mat-css-primary-color($hue: 500,  $opacity: null) {
  @if (type-of($opacity) == number) {
    @return rgba(map_get($mat-css-palette-primary, $hue), $opacity);
  } @else {
    @return rgb(map_get($mat-css-palette-primary, $hue));
  }
}

@function mat-css-accent-color($hue: 500,  $opacity: null) {
  @if (type-of($opacity) == number) {
    @return rgba(map_get($mat-css-palette-accent, $hue), $opacity);
  } @else {
    @return rgb(map_get($mat-css-palette-accent, $hue));
  }
}

@function mat-css-contrast-color($hue: 500,  $opacity: null) {
  @if (type-of($opacity) == number) {
    @return rgba(map_get($mat-css-contrast-palette, $hue), $opacity);
  } @else {
    @return rgb(map_get($mat-css-contrast-palette, $hue));
  }
}

@mixin mat-css-color-and-contrast($hue) {
  background: mat-css-primary-color($hue);
  color: mat-css-contrast-color($hue);
}

@mixin mat-css-bg($hue) {
  background: mat-css-primary-color($hue);
}


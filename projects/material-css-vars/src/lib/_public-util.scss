@import 'variables';
@import 'internal-helper';

// Utility mixins for the public

@function mat-css-primary-color($hue: 500,  $opacity: null) {
  @if (type-of($opacity) == number) {
    @return rgba(map_get($mat-css-palette-primary, $hue), $opacity);
  } @else {
    @return rgb(map_get($mat-css-palette-primary, $hue));
  }
}

@function mat-css-accent-color($hue: 500,  $opacity: null) {
  @if (type-of($opacity) == number) {
    @return rgba(map_get($mat-css-palette-accent, $hue), $opacity);
  } @else {
    @return rgb(map_get($mat-css-palette-accent, $hue));
  }
}

@function mat-css-contrast-color($hue: 500,  $opacity: null) {
  @if (type-of($opacity) == number) {
    @return rgba(map_get($mat-css-contrast-palette, $hue), $opacity);
  } @else {
    @return rgb(map_get($mat-css-contrast-palette, $hue));
  }
}

@mixin mat-css-color-and-contrast($hue) {
  background: mat-css-primary-color($hue);
  color: mat-css-contrast-color($hue);
}

@mixin mat-css-bg($hue) {
  background: mat-css-primary-color($hue);
}

@mixin mat-css-dark-theme {
  :host-context(#{$mat-css-dark-theme-selector}) & {
    @content;
  }
}

@mixin mat-css-light-theme {
  :host-context(#{$mat-css-light-theme-selector}) & {
    @content;
  }
}

@mixin mat-css-set-css-var-default($css-var-map) {
  @include mat-css-root($css-var-map);
}

@mixin mat-css-set-palette-defaults($css-var-map, $paletteType: 'primary') {
  $new-map: ();
  @each $var, $defaultVal in $css-var-map {
    @if ($var != 'contrast') {
      $new-map: map_merge($new-map, (--palette-#{$paletteType}-#{$var}: #{hex-to-rgb($defaultVal)}));
    }
  }
  @include mat-css-root($new-map);
}

